package org.openkoala.sample.job;

import static org.quartz.CronScheduleBuilder.cronSchedule;
import static org.quartz.JobBuilder.newJob;
import static org.quartz.SimpleScheduleBuilder.simpleSchedule;
import static org.quartz.TriggerBuilder.newTrigger;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import org.apache.commons.lang.StringUtils;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Job {

	protected static Logger logger = LoggerFactory.getLogger(Job.class);

	public static Scheduler scheduler;
	// public static String propsFile = "/quartz.properties";
	public static String propsFile = "/quartz_cluster_one.properties";

	static {
		try {
			Properties props = new Properties();
			try {
				props.load(Job.class.getResourceAsStream(propsFile));
			} catch (IOException e) {
				e.printStackTrace();
			}
			SchedulerFactory sf = new StdSchedulerFactory(props);
			scheduler = sf.getScheduler();
			scheduler.start();
		} catch (SchedulerException ex) {
			ex.printStackTrace();
		}
	}

	/** cron 表达式 */
	// "0 0 10,14,16 * * ?" 每天上午10点，下午2点，4点
	// "0 0/30 9-17 * * ?" 朝九晚五工作时间内每半小时
	// "0 0 12 ? * WED" 表示每个星期三中午12点
	// "0 0 12 * * ?" 每天中午12点触发
	// "0 15 10 ? * *" 每天上午10:15触发
	// "0 15 10 * * ?" 每天上午10:15触发
	// "0 15 10 * * ? *" 每天上午10:15触发
	// "0 15 10 * * ? 2005" 2005年的每天上午10:15触发
	// "0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发
	// "0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发
	// "0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
	// "0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发
	// "0 10,44 14 ? 3 WED" 每年三月的星期三的下午2:10和2:44触发
	// "0 15 10 ? * MON-FRI" 周一至周五的上午10:15触发
	// "0 15 10 15 * ?" 每月15日上午10:15触发
	// "0 15 10 L * ?" 每月最后一日的上午10:15触发
	// "0 15 10 ? * 6L" 每月的最后一个星期五上午10:15触发
	// "0 15 10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发
	// "0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发
	private String cron;
	private String key = "key";
	/** 默认缓存30s，单位：s */
	private Long time = 10L;

	private void addScheduleTask() {
		try {
			if (scheduler != null && scheduler.isStarted()) {
				JobDetail newJob = newJob(ForceUpdatePageStatefulJob.class)
						.withIdentity("job-" + key).build();
				newJob.getJobDataMap().put("url", "http://www.imobive.com");
				if (isJobExist(scheduler, newJob)) {
					// 已存在job，直接返回
					if (logger.isDebugEnabled()) {
						logger.debug("已存在Job，跳出。");
					}
					return;
				} else {

					setJobAlreadyExist(newJob);

					Trigger trigger = null;
					// 优先使用cron
					if (StringUtils.isBlank(cron)) {
						trigger = newTrigger()
								.withIdentity("trigger-" + key)
								.startAt(new Date())
								.withSchedule(
										simpleSchedule().withIntervalInSeconds(
												time.intValue())
												.repeatForever()).build();
					} else {
						trigger = newTrigger().withIdentity("trigger-" + key)
								.withSchedule(cronSchedule(cron)).build();
					}
					// schedule job
					scheduler.scheduleJob(newJob, trigger);

					if (logger.isDebugEnabled()) {
						logger.debug("＝＝＝＝＝［添加Job，定时强制更新缓存］＝＝＝＝＝");
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			// destroy(scheduler);
		}
	}

	public static void main(String[] args) {
		Job job = new Job();
		job.addScheduleTask();
	}

	private void destroy(Scheduler scheduler) {
		if (scheduler != null) {
			try {
				scheduler.shutdown(true);
			} catch (SchedulerException e) {
				e.printStackTrace();
			}
		}
	}

	private void setJobAlreadyExist(JobDetail newJob) {
		// do nothing in cluster env
		// getCache().put(newJob.getKey().getName(), JOB_EXIST_VALUE);
	}

	private boolean isJobExist(Scheduler scheduler, JobDetail newJob)
			throws SchedulerException {

		// String jobExistValue = (String) cache.get(newJob.getKey().getName());
		// if (JOB_EXIST_VALUE.equals(jobExistValue)) {
		// return true;
		// } else {
		// return false;
		// }

		return scheduler.checkExists(newJob.getKey());
	}
}
