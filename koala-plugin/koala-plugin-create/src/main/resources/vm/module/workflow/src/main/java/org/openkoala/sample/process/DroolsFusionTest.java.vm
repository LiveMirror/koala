package org.openkoala.sample.process;

import java.io.StringReader;

import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseConfiguration;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderErrors;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.conf.EventProcessingOption;
import org.drools.io.ResourceFactory;
import org.drools.runtime.StatefulKnowledgeSession;

/**
 * This is a sample class to launch a rule.
 */
public class DroolsFusionTest {

	static StatefulKnowledgeSession ksession;

	public static final void main(String[] args) {
		try {
			KnowledgeBase kbase = setupKnowledgeBase();
			ksession = kbase.newStatefulKnowledgeSession();
			KnowledgeBaseConfiguration config = KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
			config.setOption(EventProcessingOption.STREAM);
			Thread t = new Thread(new Runnable() {
				
				public void run() {
					ksession.fireUntilHalt();
				}
			});
			t.start();
			for (int x = 1; x < 10; x++) {
				DatarReading reading = new DatarReading("reading", x);
				ksession.getWorkingMemoryEntryPoint("readings stream").insert(reading);
				if (x > 5 && x < 9) {
					FollowUpReading fur = new FollowUpReading("fur", x);
					ksession.getWorkingMemoryEntryPoint("readings stream").insert(fur);
				}
			} 
			//Thread.sleep(10000);
			ksession.halt();
			ksession.dispose();

		} catch (Throwable t) {
			t.printStackTrace();
		}
	}

	private static KnowledgeBase setupKnowledgeBase() throws Exception {
		KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
		StringBuffer sb = new StringBuffer("");
        sb.append("package org.openkoala.sample.fusionrule\n");
         
        sb.append("declare DatarReading \n");
        sb.append("  @role(event) \n");
        sb.append("end\n");

        sb.append("declare FollowUpReading \n");
        sb.append("  @role(event) \n");
        sb.append("end\n");
        
        sb.append("rule \"StoreOne - Sales Record\" \n");
        //sb.append("duration( 6s )\n");
        sb.append("when\n");
        sb.append("  $dr : DatarReading($val : value,$vrd:reading) from entry-point \"readings stream\" \n");
        sb.append("  not($fur: FollowUpReading(value == $val, this after[0s,2s] $dr ) from entry-point \"readings stream\")\n");
        sb.append("then \n");
        sb.append("  System.err.println(\"did not receive follow up - reading:\"+$vrd+\" value: \" + $val); \n");
        sb.append("end \n\n");
        kbuilder.add(ResourceFactory.newReaderResource(new StringReader(sb.toString())), ResourceType.DRL);
		KnowledgeBuilderErrors errors = kbuilder.getErrors();
		if (errors.size() > 0) {
			for (KnowledgeBuilderError error : errors) {
				System.err.println(error);
			}
			throw new IllegalArgumentException("Could not parse knowledge.");
		}
		KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
		kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());

		return kbase;
	}

}