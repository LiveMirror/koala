package org.openkoala.sample.process;

import java.io.StringReader;

import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseConfiguration;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderErrors;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.conf.EventProcessingOption;
import org.drools.io.ResourceFactory;
import org.drools.runtime.StatefulKnowledgeSession;

public class DroolsFusionSampleTest {
	public static final void main(String[] args) { 
        try { 
            KnowledgeBase kbase = readKnowledgeBase(); 
            StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession(); 
            Message message = new Message(); 
            message.setMessage("Hello World"); 
            message.setStatus(Message.HELLO); 
            ksession.insert(message); 
            ksession.fireAllRules(); 
            //logger.close(); 
        } catch (Throwable t) { 
                t.printStackTrace(); 
        } 
	} 

	private static KnowledgeBase readKnowledgeBase() throws Exception { 
	    KnowledgeBaseConfiguration conf = KnowledgeBaseFactory.newKnowledgeBaseConfiguration(); 
	    conf.setOption(EventProcessingOption.STREAM); // STREAM mode as we are
	    KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
	    StringBuffer sb = new StringBuffer("");
	    sb.append("package org.openkoala.sample.fusionrule\n");
	    sb.append("  declare Message\n");
	    sb.append("    @role ( event )\n");
	    sb.append("  end\n");
	    sb.append("  rule \"Hello\"\n");
	    sb.append("  dialect \"mvel\"\n");
	    sb.append("  when \n");
	    sb.append("  	m : Message( status == Message.HELLO, myMessage : message )\n");
	    sb.append("	 then  \n");
	    sb.append("		System.out.println( \"Hello added\"+myMessage ); \n"); 
	    sb.append("  end \n"); 
	    sb.append("  rule \"After5\"\n"); 
	    sb.append("  dialect \"mvel\"\n"); 
	    sb.append("  when\n");
	    sb.append("  	m : Message( status == Message.HELLO, myMessage : message )\n");  
	    sb.append("  	not(Message( status == Message.GOODBYE , this after [0s,5s] m ))\n"); 
	    sb.append("  then\n"); 
	    sb.append("  	System.out.println( \"After5 then start\" );\n");
	    sb.append("  	m.status=m.GOODBYE;\n");
	    sb.append("  	System.out.println(\"After5 then stop\" );\n"); 
	    sb.append("  	retract(m);\n"); 
	    sb.append("  	System.out.println(\"m.status:===\"+m.status );\n"); 
	    sb.append("  end \n");
	    kbuilder.add(ResourceFactory.newReaderResource(new StringReader(sb.toString())), ResourceType.DRL);
	    KnowledgeBuilderErrors errors = kbuilder.getErrors(); 
	    if (errors.size() > 0) { 
	        for (KnowledgeBuilderError error : errors) { 
	                System.err.println(error); 
	        } 
	        throw new IllegalArgumentException("Could not parse knowledge.");
	    } 
	    KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase(conf);
	    kbase.addKnowledgePackages(kbuilder.getKnowledgePackages()); 
	    return kbase; 
	} 

}
