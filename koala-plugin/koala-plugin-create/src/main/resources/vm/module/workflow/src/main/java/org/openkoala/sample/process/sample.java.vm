package org.openkoala.sample.process;

import java.io.IOException;
import java.io.StringReader;
import java.util.Calendar;
import java.util.Date;

import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseConfiguration;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.compiler.DroolsParserException;
import org.drools.conf.EventProcessingOption;
import org.drools.io.ResourceFactory;
import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.runtime.rule.WorkingMemoryEntryPoint;

public class sample {
   public static void main(String[] args){
	    StringBuffer sb = new StringBuffer("");
	    try {
	        sb.append("package org.openkoala.sample\n");
	        sb.append("import org.openkoala.sample.process.MyEvent;\n");
	        
	        sb.append("declare CurrentTime \n");
	        sb.append("  @role(event) \n");
	        sb.append("end\n");
	        
	        sb.append("declare MyEvent \n");
	        sb.append("  @role(event) \n");
	        sb.append("  @timestamp(eventDateTime) \n");
	        sb.append("end\n");
	
	        sb.append("rule \"StoreOne - Sales Record\" \n");
	        sb.append("when\n");
	        //sb.append("  $event: MyEvent() over window:time(2s) from entry-point \"My Stream\" \n");
	        sb.append("  $now: CurrentTime() from entry-point \"My Stream\"\n");
	        sb.append("  $event: MyEvent(this before[2s, 2s] $now) from entry-point \"My Stream\" \n");
	        sb.append("then \n");
	        sb.append("  System.out.println($event.getEventName() + \": Event Occured!!!\" + $event.getEventDateTime().toString()); \n");
	        sb.append("end \n\n");
	        PackageBuilderDrlByStr(sb,null);
	    }catch(Throwable t){
	    	t.printStackTrace();
	    }
	   
   }
	private static Object PackageBuilderDrlByStr(StringBuffer sb,Object object) throws DroolsParserException, IOException, InterruptedException{
	    KnowledgeBuilder kBuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
	    kBuilder.add(ResourceFactory.newReaderResource(new StringReader(sb.toString())), ResourceType.DRL);
		 if (kBuilder.hasErrors()) {
	         System.err.print(kBuilder.getErrors());
	         return null;
	    }
	    KnowledgeBaseConfiguration kconfig = KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
	    kconfig.setOption(EventProcessingOption.STREAM);
	    KnowledgeBase kBase = KnowledgeBaseFactory.newKnowledgeBase(kconfig);
	    kBase.addKnowledgePackages(kBuilder.getKnowledgePackages());
	    StatefulKnowledgeSession  kSession = kBase.newStatefulKnowledgeSession();
	    WorkingMemoryEntryPoint entryPoint = kSession.getWorkingMemoryEntryPoint("My Stream");
        Calendar cal = Calendar.getInstance();
        Date d1 = cal.getTime();
        cal.setTime(d1);
        cal.add(Calendar.SECOND,2);
        Date d2 = cal.getTime();
        cal.setTime(d2);
        cal.add(Calendar.SECOND,3);
        Date d3 = cal.getTime();
        cal.setTime(d3);
        cal.add(Calendar.SECOND,4);
        Date d4 = cal.getTime();
	    MyEvent e1 = new MyEvent("Meeting1", d1); 
	    MyEvent e2 = new MyEvent("Meeting2", d2); 
	    MyEvent e3 = new MyEvent("Meeting3", d3); 
	    MyEvent e4 = new MyEvent("Meeting2", d4); 
	    entryPoint.insert(e1);
	    entryPoint.insert(e2);
	    entryPoint.insert(e3);
	    entryPoint.insert(e4);
	    kSession.fireAllRules();
	    kSession.dispose();
        return object;
	}
}
