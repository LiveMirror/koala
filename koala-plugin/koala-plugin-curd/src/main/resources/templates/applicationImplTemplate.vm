#set($package = ${entity.className.substring(0, ${entity.className.lastIndexOf(".")})})
package ${applicationClass.packageName};
#set($domainClass = $applicationClass.entityModel.name)
#set($variableName = ${domainClass.substring(0, 1).toLowerCase()} + ${domainClass.substring(1)})
#set($currntVO = ${domainClass.concat("DTO")})
#set($currntVOVariable = ${currntVO.substring(0, 1).toLowerCase()} + ${currntVO.substring(1)})
#set($joinClause = "")

import java.util.List;
import java.util.ArrayList;
import java.text.MessageFormat;
import javax.inject.Inject;
import javax.inject.Named;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;
import org.dayatang.domain.InstanceFactory;
import ${applicationClass.packageName.replaceAll("impl","")}${applicationClass.name.replaceAll("Impl","")};
import ${entity.className};

@Named
public class ${applicationClass.name} implements ${applicationClass.name.replaceAll("Impl","")} {

	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public ${domainClass} get${domainClass}(${applicationClass.entityModel.singleIDFieldModel.simpleType} ${applicationClass.entityModel.singleIDFieldModel.name}) {
		${domainClass} $variableName = ${domainClass}.load(${domainClass}.class, ${applicationClass.entityModel.singleIDFieldModel.name});
		
		return ${variableName};
	}
	
	public ${domainClass} save${domainClass}(${domainClass} ${variableName}) {
		${variableName}.save();
		return ${variableName};
	}
	
	public void update${domainClass}(${domainClass} ${variableName}) {
		${variableName} .save();
	}
	
	public void remove${domainClass}(${applicationClass.entityModel.singleIDFieldModel.simpleType}  ${applicationClass.entityModel.singleIDFieldModel.name}) {
		this.remove${domainClass}s(new ${applicationClass.entityModel.singleIDFieldModel.simpleType}[] { ${applicationClass.entityModel.singleIDFieldModel.name} });
	}
	
	public void remove${domainClass}s(${applicationClass.entityModel.singleIDFieldModel.simpleType}[] ${applicationClass.entityModel.singleIDFieldModel.name}s) {
		for (int i = 0; i < ${applicationClass.entityModel.singleIDFieldModel.name}s.length; i++) {
			${domainClass} ${variableName} = ${domainClass}.load(${domainClass}.class, ${applicationClass.entityModel.singleIDFieldModel.name}s[i]);
			${variableName}.remove();
		}
	}
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public List<${domainClass}> findAll${domainClass}() {
		return ${domainClass}.findAll(${domainClass}.class);
	}
	
}
