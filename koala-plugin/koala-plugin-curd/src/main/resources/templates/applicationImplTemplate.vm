#set($package = ${entity.className.substring(0, ${entity.className.lastIndexOf(".")})})

package ${applicationImplClass.packageName}${package.substring(${package.lastIndexOf(".")})};
#set($domainClass = $applicationImplClass.entityModel.name)
#set($variableName = ${domainClass.substring(0, 1).toLowerCase()} + ${domainClass.substring(1)})
#set($currntVO = ${domainClass.concat("DTO")})
#set($currntVOVariable = ${currntVO.substring(0, 1).toLowerCase()} + ${currntVO.substring(1)})
#set($joinClause = "")

import java.util.List;
import java.util.ArrayList;
import java.text.MessageFormat;
import javax.inject.Inject;
import javax.inject.Named;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;
import org.dayatang.querychannel.Page;
import org.dayatang.querychannel.QueryChannelService;
import ${dtoClass.packageName}.*;
import ${applicationClass.packageName}${package.substring(${package.lastIndexOf(".")})}.${applicationClass.name};
import ${entity.className.substring(0, ${entity.className.lastIndexOf(".")})}.*;

@Named
@Transactional
public class ${applicationImplClass.name} implements ${applicationClass.name} {

	@Inject
	private QueryChannelService queryChannel;
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public ${currntVO} get${domainClass}(${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name}) {
		${domainClass} $variableName = ${domainClass}.load(${domainClass}.class, ${dtoClass.entityModel.singleIDFieldModel.name});
		${currntVO} ${currntVOVariable} = new ${currntVO}();
		// 将domain转成VO
		try {
			BeanUtils.copyProperties(${currntVOVariable}, ${variableName});
		} catch (Exception e) {
			e.printStackTrace();
		}
		${currntVOVariable}.set${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}((${dtoClass.entityModel.singleIDFieldModel.type})${variableName}.get${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}());
		return ${currntVOVariable};
	}
	
	public ${currntVO} save${domainClass}(${currntVO} ${currntVOVariable}) {
		${domainClass} ${variableName} = new ${domainClass}();
		try {
        	BeanUtils.copyProperties(${variableName}, ${currntVOVariable});
        } catch (Exception e) {
        	e.printStackTrace();
        }
		${variableName}.save();
		${currntVOVariable}.set${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}((${dtoClass.entityModel.singleIDFieldModel.type})${variableName}.get${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}());
		return ${currntVOVariable};
	}
	
	public void update${domainClass}(${currntVO} ${currntVOVariable}) {
		${domainClass} ${variableName} = ${domainClass}.get(${domainClass}.class, ${currntVOVariable}.get${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}());
		// 设置要更新的值
		try {
			BeanUtils.copyProperties(${variableName}, ${currntVOVariable});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void remove${domainClass}(${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name}) {
		this.remove${domainClass}s(new ${dtoClass.entityModel.singleIDFieldModel.simpleType}[] { ${dtoClass.entityModel.singleIDFieldModel.name} });
	}
	
	public void remove${domainClass}s(${dtoClass.entityModel.singleIDFieldModel.simpleType}[] ${dtoClass.entityModel.singleIDFieldModel.name}s) {
		for (int i = 0; i < ${dtoClass.entityModel.singleIDFieldModel.name}s.length; i++) {
			${domainClass} ${variableName} = ${domainClass}.load(${domainClass}.class, ${dtoClass.entityModel.singleIDFieldModel.name}s[i]);
			${variableName}.remove();
		}
	}
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public List<${currntVO}> findAll${domainClass}() {
		List<${currntVO}> list = new ArrayList<${currntVO}>();
		List<${domainClass}> all = ${domainClass}.findAll(${domainClass}.class);
		for (${domainClass} ${variableName} : all) {
			${currntVO} ${currntVOVariable} = new ${currntVO}();
			// 将domain转成VO
			try {
				BeanUtils.copyProperties(${currntVOVariable}, ${variableName});
			} catch (Exception e) {
				e.printStackTrace();
			}
			list.add(${currntVOVariable});
		}
		return list;
	}
	
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public Page<${currntVO}> pageQuery${domainClass}(${currntVO} queryVo, int currentPage, int pageSize) {
		List<${currntVO}> result = new ArrayList<${currntVO}>();
		List<Object> conditionVals = new ArrayList<Object>();
#set($jpql = "select _${variableName} from ${domainClass} _${variableName} ")
#foreach(${relation} in ${applicationClass.relations})
#set($relationModel = ${relation.relationModel})
#set($relationType = ${relationModel.type})
#set($entityName = ${relationModel.entityModel.name})
#set($relationName = ${relation.name.substring(0, 1).toUpperCase()} + ${relation.name.substring(1)})
#if(${relationType} == "ManyToOne" || ${relationType} == "OneToOne")
#set($joinClause = $joinClause +  " left join _${variableName}.${relation.name} ")
#end
#end
	   	StringBuilder jpql = new StringBuilder("${jpql} $!{joinClause} where 1=1 ");
#foreach($field in ${entity.fields})
#set($propertyName = ${field.name.substring(0, 1).toUpperCase()} + ${field.name.substring(1)})
#if(${dtoClass.isPrimitiveType(${field.type})} && ${field.name} != "id")
	   	if (queryVo.get${propertyName}() != null) {
	   		jpql.append(" and _${variableName}.${field.name}=?");
	   		conditionVals.add(queryVo.get${propertyName}());
	   	}	
#end
	
#if(${dtoClass.isBooleanType(${field.type})})
	   	if (queryVo.get${propertyName}() != null) {
		   	jpql.append(" and _${variableName}.${field.name} is ?");
		   	conditionVals.add(queryVo.get${propertyName}());
	   	}	
#end
#if(${dtoClass.isStringType(${field.type})})
	   	if (queryVo.get${propertyName}() != null && !"".equals(queryVo.get${propertyName}())) {
	   		jpql.append(" and _${variableName}.${field.name} like ?");
	   		conditionVals.add(MessageFormat.format("%{0}%", queryVo.get${propertyName}()));
	   	}		
#end	
#if(${dtoClass.isDateType(${field.type})})
	   	if (queryVo.get${propertyName}() != null) {
	   		jpql.append(" and _${variableName}.${field.name} between ? and ? ");
	   		conditionVals.add(queryVo.get${propertyName}());
	   		conditionVals.add(queryVo.get${propertyName}End());
	   	}	
#end	
#end
        Page<${domainClass}> pages = queryChannel.createJpqlQuery(jpql.toString()).setParameters(conditionVals).setPage(currentPage-1, pageSize).pagedList();
        for (${domainClass} ${variableName} : pages.getData()) {
            ${currntVO} ${currntVOVariable} = new ${currntVO}();
            
             // 将domain转成VO
            try {
            	BeanUtils.copyProperties(${currntVOVariable}, ${variableName});
            } catch (Exception e) {
            	e.printStackTrace();
            } 
            
      #foreach($view in ${applicationImplClass.entityViewUI.listModel.views})
        #set($property = ${view.relative.substring(0, 1).toUpperCase()} + ${view.relative.substring(1)})
        #set($express = ${view.express.substring(0, 1).toUpperCase()} + ${view.express.substring(1)})
        #if(${view.viewType} == "RelativeReadOnlyView")
		  if(${variableName}.get$property() != null) {	
			   ${currntVOVariable}.set$property$express(${variableName}.get$property().get$express());
		  }
         #end
       #end
            result.add(${currntVOVariable});
        }
        return new Page<${currntVO}>(pages.getPageIndex(), pages.getResultCount(), pageSize, result);
	}
	
#foreach(${relation} in ${applicationClass.relations})
#set($relationModel = ${relation.relationModel})
#set($relationType = ${relationModel.type})
#set($entityName = ${relationModel.entityModel.name})
#set($relationName = ${relation.name.substring(0, 1).toUpperCase()} + ${relation.name.substring(1)})
#if(${relationType} == "ManyToOne" || ${relationType} == "OneToOne")
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public ${entityName}DTO find${relationName}By${domainClass}(${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name}) {
		String jpql = "select e from ${domainClass} o right join o.${relation.name} e where o.${dtoClass.entityModel.singleIDFieldModel.name}=?";
		${entityName} result = (${entityName}) queryChannel.createJpqlQuery(jpql).setParameters(new Object[] { ${dtoClass.entityModel.singleIDFieldModel.name} }).singleResult();
		${entityName}DTO  dto = new ${entityName}DTO();
		if (result != null) {
			try {
				BeanUtils.copyProperties(dto, result);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return dto;
	}
#end

#if(${relationType} == "OneToMany" || ${relationType} == "ManyToMany")
	@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
	public Page<${entityName}DTO> find${relationName}By${domainClass}(${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name}, int currentPage, int pageSize) {
		List<${entityName}DTO> result = new ArrayList<${entityName}DTO>();
		String jpql = "select e from ${domainClass} o right join o.${relation.name} e where o.${dtoClass.entityModel.singleIDFieldModel.name}=?";
		Page<${entityName}> pages = queryChannel.createJpqlQuery(jpql).setParameters(new Object[] { ${dtoClass.entityModel.singleIDFieldModel.name} }).setPage(currentPage-1, pageSize).pagedList();
        for (${entityName} entity : pages.getResult()) {
            ${entityName}DTO dto = new ${entityName}DTO();
            try {
				BeanUtils.copyProperties(dto, entity);
			} catch (Exception e) {
				e.printStackTrace();
			}
            result.add(dto);
        }
        return new Page<${entityName}DTO>(Page.getStartOfPage(currentPage, pageSize), pages.getResultCount(), pageSize, result);
	}		
#end
#end
	
}
