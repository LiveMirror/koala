package ${dtoClass.packageName};

#set($domainClass = ${dtoClass.name.substring(0, ${dtoClass.name.lastIndexOf("DTO")})})
#set($variableName = ${domainClass.substring(0, 1).toLowerCase()} + ${domainClass.substring(1)})
#foreach($import in ${dtoClass.imports})
import $import;

#end
import java.io.Serializable;
#if (${project.mvcType} == "SpringMVC")

#end

public class ${dtoClass.name} implements Serializable {

	private ${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name};

	private ${dtoClass.entityModel.versionFieldModel.simpleType} ${dtoClass.entityModel.versionFieldModel.name};

#foreach($entry in ${dtoClass.fieldMap.entrySet()})
	#if($entry.value.indexOf(".") == -1)
		#if(${entry.value} == "int" || ${entry.value}=="Integer")
			#set($simpleTypeName = "Integer")
		#elseif(${entry.value} == "short" || ${entry.value}=="Short")
			#set($simpleTypeName = "Short" )
		#elseif(${entry.value} == "long" || ${entry.value}=="Long")
			#set($simpleTypeName = "Long")
		#elseif(${entry.value} == "float" || ${entry.value}=="Float")
			#set($simpleTypeName  = "Float")
		#elseif(${entry.value} == "double" || ${entry.value}=="Double")
			#set($simpleTypeName = "Double")
		#elseif(${entry.value} == "boolean" || ${entry.value}=="Boolean")
			#set($simpleTypeName = "Boolean")
			#elseif(${entry.value} == "char")
			#set($simpleTypeName = "Character")
			#elseif(${entry.value} == "byte" || ${entry.value}=="Byte")
			#set($simpleTypeName = "Byte")
			
		#end
	#else
		#set($index = ${entry.value.lastIndexOf(".")} + 1)
		#set($simpleTypeName = ${entry.value.substring($index)})
	#end
#if($simpleTypeName.indexOf("Boolean") > 0)
	private Boolean ${entry.key};
#else

#if(${dtoClass.isDateType(${entry.value})} && ${project.mvcType} == "SpringMVC")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
#end
	private ${simpleTypeName} ${entry.key};
#end	
#if(${dtoClass.isDateType(${entry.value})} && ${project.mvcType} == "SpringMVC")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
#end
#if(${dtoClass.isDateType(${entry.value})})
	private ${simpleTypeName} ${entry.key}End;
#end
#end
#foreach($entry in ${dtoClass.fieldMap.entrySet()})
	#if($entry.value.indexOf(".") == -1)
		#if(${entry.value} == "int" || ${entry.value}=="Integer")
			#set($simpleTypeName = "Integer")
		#elseif(${entry.value} == "short" || ${entry.value}=="Short")
			#set($simpleTypeName = "Short" )
		#elseif(${entry.value} == "long" || ${entry.value}=="Long")
			#set($simpleTypeName = "Long")
		#elseif(${entry.value} == "float" || ${entry.value}=="Float")
			#set($simpleTypeName = "Float")
		#elseif(${entry.value} == "double" || ${entry.value}=="Double")
			#set($simpleTypeName = "Double")
		#elseif(${entry.value} == "boolean" || ${entry.value}=="Boolean")
			#set($simpleTypeName = "Boolean")
			#elseif(${entry.value} == "char")
			#set($simpleTypeName = "Character")
			#elseif(${entry.value} == "byte" || ${entry.value}=="Byte")
			#set($simpleTypeName = "Byte")
		#end
		#else
		#set($index = ${entry.value.lastIndexOf(".")} + 1)
		#set($simpleTypeName = ${entry.value.substring($index)})
	#end
	#set($propertyName = ${entry.key.substring(0, 1).toUpperCase()} + ${entry.key.substring(1)})

#if($simpleTypeName.indexOf("Boolean") > 0)
	public Boolean get${propertyName}() {
		return ${entry.key};
	}
	
	public void set${propertyName}(Boolean ${entry.key}) { 
		this.${entry.key} = ${entry.key};
	}
	
#else

	public void set${propertyName}($simpleTypeName ${entry.key}) { 
		this.${entry.key} = ${entry.key};
	}

#if(${dtoClass.isDateType(${entry.value})} && ${project.mvcType} == "SpringMVC")
	@JsonSerialize(using = JsonDateSerializer.class)
#end
	public ${simpleTypeName} get${propertyName}() {
		return this.${entry.key};
	}
#end
	
#if(${dtoClass.isDateType(${entry.value})})
	public void set${propertyName}End($simpleTypeName ${entry.key}End) { 
		this.${entry.key}End = ${entry.key}End;
	}

#if(${dtoClass.isDateType(${entry.value})} && ${project.mvcType} == "SpringMVC")
	@JsonSerialize(using = JsonDateSerializer.class)
#end	
	public ${simpleTypeName} get${propertyName}End() {
		return this.${entry.key}End;
	}
#end
#end
	
	public ${dtoClass.entityModel.singleIDFieldModel.simpleType} get${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}() {
		return ${dtoClass.entityModel.singleIDFieldModel.name};
	}

	public void set${dtoClass.entityModel.singleIDFieldModel.nameToFirstLetterUpper}(${dtoClass.entityModel.singleIDFieldModel.simpleType} ${dtoClass.entityModel.singleIDFieldModel.name}) {
		this.${dtoClass.entityModel.singleIDFieldModel.name} = ${dtoClass.entityModel.singleIDFieldModel.name};
	}
	
	public ${dtoClass.entityModel.versionFieldModel.simpleType} get${dtoClass.entityModel.versionFieldModel.nameToFirstLetterUpper}() {
		return ${dtoClass.entityModel.versionFieldModel.name};
	}

	public void set${dtoClass.entityModel.versionFieldModel.nameToFirstLetterUpper}(${dtoClass.entityModel.versionFieldModel.simpleType} ${dtoClass.entityModel.versionFieldModel.name}) {
		this.${dtoClass.entityModel.versionFieldModel.name} = ${dtoClass.entityModel.versionFieldModel.name};
	}

    @Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((${dtoClass.entityModel.singleIDFieldModel.name} == null) ? 0 : ${dtoClass.entityModel.singleIDFieldModel.name}.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		${dtoClass.name} other = (${dtoClass.name}) obj;
		if (${dtoClass.entityModel.singleIDFieldModel.name} == null) {
			if (other.${dtoClass.entityModel.singleIDFieldModel.name} != null)
				return false;
		} else if (!${dtoClass.entityModel.singleIDFieldModel.name}.equals(other.${dtoClass.entityModel.singleIDFieldModel.name}))
			return false;
		return true;
	}
}