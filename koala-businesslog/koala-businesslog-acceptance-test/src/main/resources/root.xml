<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        		http://www.springframework.org/schema/aop
	   		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:annotation-config/>


    <context:component-scan base-package="org.openkoala">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:property-placeholder location="classpath*:META-INF/props/*.properties" ignore-unresolvable="true"/>

    <tx:annotation-driven transaction-manager="transactionManager_org"/>

    <bean id="transactionManager_org" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory_org"/>
    </bean>


    <bean id="entityManagerFactory_org" class="org.openkoala.koala.util.KoalaEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="org"/>
        <property name="packagesToScan">
            <list>
                <value>org.openkoala.organisation.domain</value>
                <value>org.openkoala.businesslog.model</value>
            </list>
        </property>

        <property name="scanMappingResourceDir" value="mappings"/>
        <property name="dataSource" ref="dataSource_org"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${org.db.Type}"></property>
                <property name="showSql" value="${org.hibernate.show_sql}"></property>
                <property name="generateDdl" value="${org.generateDdl}"></property>
                <property name="databasePlatform" value="${org.db.jdbc.dialect}"></property>
            </bean>
        </property>
    </bean>

    <bean id="repository_org" class="org.dayatang.persistence.jpa.EntityRepositoryJpa">
        <constructor-arg name="entityManagerFactory" ref="entityManagerFactory_org"/>
    </bean>

    <bean id="queryChannel_org" class="org.dayatang.querychannel.impl.QueryChannelServiceImpl">
        <constructor-arg name="repository" ref="repository_org"/>
    </bean>

    <bean id="dataSource_org" class="org.logicalcobwebs.proxool.ProxoolDataSource">
        <property name="driver" value="${org.db.jdbc.driver}"/>
        <property name="driverUrl" value="${org.db.jdbc.connection.url}"/>
        <property name="user" value="${org.db.jdbc.username}"/>
        <property name="password" value="${org.db.jdbc.password}"/>
        <property name="prototypeCount" value="5"/>
        <property name="maximumConnectionCount" value="${org.maximumConnectionCount}"/>
        <property name="minimumConnectionCount" value="${org.minimumConnectionCount}"/>
        <property name="houseKeepingTestSql" value="select 1"/>
        <property name="testBeforeUse" value="true"/>
        <property name="alias" value="org"/>
    </bean>


    <context:component-scan
            base-package="org.openkoala.businesslog.applicationImpl,org.openkoala.businesslog.application,org.openkoala.businesslog.impl"/>


    <context:property-placeholder location="classpath*:koala-businesslog.properties" ignore-unresolvable="true"/>
    <bean id="logInterceptor" class="org.openkoala.businesslog.utils.BusinessLogInterceptor"/>
    <bean id="businessLogExporter" class="${businessLogExporter}"/>
    <bean id="businessLogApplication" class="org.openkoala.businesslog.applicationImpl.BusinessLogApplicationImpl"/>

    <!-- 加了 proxy-target-class="true" 使spring集中制使用cglib的代理 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="businessBehavior" expression="${pointcut}"/>
        <aop:aspect id="logAspect" ref="logInterceptor">
            <aop:after-returning returning="result" method="logAfter" pointcut-ref="businessBehavior"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="businessBehavior" throwing="error"/>
        </aop:aspect>
    </aop:config>

    <!-- 异步线程池 -->
    <bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数  -->
        <property name="corePoolSize" value="${log.threadPool.corePoolSize}"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="${log.threadPool.maxPoolSize}"/>
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="${log.threadPool.queueCapacity}"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="${log.threadPool.keepAliveSeconds}"/>
        <!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="${log.threadPool.rejectedExecutionHandler}"/>
        </property>
    </bean>


    <bean id="repository_businessLog" class="org.dayatang.persistence.jpa.EntityRepositoryJpa">
        <constructor-arg name="entityManagerFactory" ref="entityManagerFactory_org" />
    </bean>

    <bean id="queryChannel_businessLog" class="org.dayatang.querychannel.impl.QueryChannelServiceImpl">
        <constructor-arg name="repository" ref="repository_businessLog" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager_businessLog" />

    <!-- Drives transactions using local JPA APIs -->
    <bean id="transactionManager_businessLog" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory_org" />
    </bean>

</beans>